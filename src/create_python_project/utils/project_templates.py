#!/usr/bin/env python3
"""
Project Templates Manager

Handles project-specific scaffolding and file generation.
"""

import os
from typing import Any


class ProjectTemplateManager:
    """Manages project-specific templates and scaffolding."""

    def __init__(self, project_dir: str, project_name: str, tech_stack: dict[str, Any]):
        self.project_dir = project_dir
        self.project_name = project_name
        self.tech_stack = tech_stack
        self.package_name = project_name.replace("-", "_").replace(" ", "_").lower()

    def create_project_structure(self, project_type: str) -> bool:
        """Create complete project structure based on type and tech stack."""
        try:
            if project_type == "web":
                return self._create_web_project()
            elif project_type == "api":
                return self._create_api_project()
            elif project_type == "data":
                return self._create_data_project()
            elif project_type == "cli":
                return self._create_cli_project()
            else:
                return self._create_basic_project()
        except Exception as e:
            print(f"Error creating project structure: {e}")
            return False

    def _create_web_project(self) -> bool:
        """Create Django + React web project structure."""
        # Django backend
        backend_dir = os.path.join(self.project_dir, "backend")
        os.makedirs(backend_dir, exist_ok=True)

        # Main Django project structure
        django_project_dir = os.path.join(backend_dir, self.package_name)
        os.makedirs(django_project_dir, exist_ok=True)

        # Settings package
        settings_dir = os.path.join(django_project_dir, "settings")
        os.makedirs(settings_dir, exist_ok=True)

        # Create Django files
        self._create_file(backend_dir, "manage.py", self._get_django_manage_py())
        self._create_file(backend_dir, "requirements.txt", "# Generated by Poetry")
        self._create_file(backend_dir, ".env.example", self._get_django_env_template())

        # Django project files
        self._create_file(django_project_dir, "__init__.py", "")
        self._create_file(django_project_dir, "urls.py", self._get_django_urls())
        self._create_file(django_project_dir, "wsgi.py", self._get_django_wsgi())
        self._create_file(django_project_dir, "asgi.py", self._get_django_asgi())

        # Settings files
        self._create_file(settings_dir, "__init__.py", "")
        self._create_file(settings_dir, "base.py", self._get_django_base_settings())
        self._create_file(
            settings_dir, "development.py", self._get_django_dev_settings()
        )
        self._create_file(
            settings_dir, "production.py", self._get_django_prod_settings()
        )

        # Create first Django app
        app_dir = os.path.join(backend_dir, "core")
        os.makedirs(app_dir, exist_ok=True)
        self._create_django_app_files(app_dir)

        # React frontend if specified
        if self._get_tech_choice("Frontend") == "React":
            self._create_react_frontend()

        return True

    def _create_react_frontend(self):
        """Create React frontend structure."""
        frontend_dir = os.path.join(self.project_dir, "frontend")
        os.makedirs(frontend_dir, exist_ok=True)

        # React app structure
        src_dir = os.path.join(frontend_dir, "src")
        public_dir = os.path.join(frontend_dir, "public")

        os.makedirs(src_dir, exist_ok=True)
        os.makedirs(public_dir, exist_ok=True)

        # Package.json
        package_json = self._get_react_package_json()
        self._create_file(frontend_dir, "package.json", package_json)

        # React source files
        self._create_file(src_dir, "App.tsx", self._get_react_app_tsx())
        self._create_file(src_dir, "main.tsx", self._get_react_main_tsx())
        self._create_file(src_dir, "index.css", self._get_react_css())

        # Vite config
        self._create_file(frontend_dir, "vite.config.ts", self._get_vite_config())
        self._create_file(frontend_dir, "tsconfig.json", self._get_typescript_config())

    def _create_api_project(self) -> bool:
        """Create FastAPI project structure."""
        # API structure
        api_dir = os.path.join(self.project_dir, "src", self.package_name)
        routers_dir = os.path.join(api_dir, "routers")
        models_dir = os.path.join(api_dir, "models")

        os.makedirs(routers_dir, exist_ok=True)
        os.makedirs(models_dir, exist_ok=True)

        # FastAPI files
        self._create_file(api_dir, "main.py", self._get_fastapi_main())
        self._create_file(api_dir, "database.py", self._get_fastapi_database())
        self._create_file(routers_dir, "__init__.py", "")
        self._create_file(routers_dir, "auth.py", self._get_fastapi_auth_router())

        return True

    def _create_data_project(self) -> bool:
        """Create data science project structure."""
        # Data project structure
        data_dir = os.path.join(self.project_dir, "data")
        notebooks_dir = os.path.join(self.project_dir, "notebooks")

        os.makedirs(data_dir, exist_ok=True)
        os.makedirs(notebooks_dir, exist_ok=True)

        # Data analysis module already created in core_project_builder
        # Add visualization module
        src_dir = os.path.join(self.project_dir, "src", self.package_name)
        self._create_file(src_dir, "visualization.py", self._get_visualization_module())

        return True

    def _create_cli_project(self) -> bool:
        """Create CLI project structure."""
        src_dir = os.path.join(self.project_dir, "src", self.package_name)

        # CLI main module
        self._create_file(src_dir, "cli.py", self._get_cli_module())
        self._create_file(src_dir, "__main__.py", self._get_cli_main())

        return True

    def _create_basic_project(self) -> bool:
        """Create basic Python package structure."""
        # Already handled by core_project_builder
        return True

    def _get_tech_choice(self, category: str) -> str:
        """Get selected technology for a category."""
        if isinstance(self.tech_stack, dict) and "categories" in self.tech_stack:
            for cat in self.tech_stack["categories"]:
                if cat["name"] == category:
                    for option in cat.get("options", []):
                        if option.get("recommended", False):
                            return str(option["name"])
        return ""

    def _create_file(self, directory: str, filename: str, content: str):
        """Create a file with the given content."""
        filepath = os.path.join(directory, filename)
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(content)

    def _create_django_app_files(self, app_dir: str):
        """Create Django app files."""
        files = {
            "__init__.py": "",
            "admin.py": "from django.contrib import admin\n\n# Register your models here.\n",
            "apps.py": self._get_django_apps_py(),
            "models.py": "from django.db import models\n\n# Create your models here.\n",
            "views.py": "from django.shortcuts import render\n\n# Create your views here.\n",
            "urls.py": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Add your URL patterns here\n]\n",
        }

        for filename, content in files.items():
            self._create_file(app_dir, filename, content)

    def _get_django_manage_py(self) -> str:
        return f'''#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys

if __name__ == '__main__':
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', '{self.package_name}.settings.development')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)
'''

    def _get_django_env_template(self) -> str:
        return """# Django settings
SECRET_KEY=your-secret-key-here
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# Database
DATABASE_URL=sqlite:///db.sqlite3

# Email settings
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
"""

    def _get_django_urls(self) -> str:
        return f'''"""
URL configuration for {self.package_name} project.
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('core.urls')),
]
'''

    def _get_react_package_json(self) -> str:
        return f"""{{
  "name": "{self.project_name}-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {{
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  }},
  "dependencies": {{
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }},
  "devDependencies": {{
    "@types/react": "^18.2.66",
    "@types/react-dom": "^18.2.22",
    "@vitejs/plugin-react": "^4.2.1",
    "typescript": "^5.2.2",
    "vite": "^5.2.0"
  }}
}}"""

    def _get_django_wsgi(self) -> str:
        return f'''"""WSGI config for {self.package_name} project."""
import os
from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', '{self.package_name}.settings.development')
application = get_wsgi_application()
'''

    def _get_django_asgi(self) -> str:
        return f'''"""ASGI config for {self.package_name} project."""
import os
from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', '{self.package_name}.settings.development')
application = get_asgi_application()
'''

    def _get_django_base_settings(self) -> str:
        return f'''"""Base settings for {self.package_name} project."""
import os
from pathlib import Path

BASE_DIR = Path(__file__).resolve().parent.parent.parent
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-change-me')
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

LOCAL_APPS = ['core']
INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '{self.package_name}.urls'
WSGI_APPLICATION = '{self.package_name}.wsgi.application'

DATABASES = {{
    'default': {{
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }}
}}

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True
STATIC_URL = '/static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
'''

    def _get_django_dev_settings(self) -> str:
        return '''"""Development settings."""
from .base import *

DEBUG = True
ALLOWED_HOSTS = ['localhost', '127.0.0.1']
'''

    def _get_django_prod_settings(self) -> str:
        return '''"""Production settings."""
from .base import *
import os

DEBUG = False
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')
'''

    def _get_react_app_tsx(self) -> str:
        return """import React from 'react'
import './App.css'

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to Your React App</h1>
        <p>Edit src/App.tsx and save to reload.</p>
      </header>
    </div>
  )
}

export default App
"""

    def _get_react_main_tsx(self) -> str:
        return """import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
"""

    def _get_react_css(self) -> str:
        return """body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
  -webkit-font-smoothing: antialiased;
}

.App {
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}
"""

    def _get_vite_config(self) -> str:
        return """import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:8000',
        changeOrigin: true,
      },
    },
  },
})
"""

    def _get_typescript_config(self) -> str:
        return """{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
"""

    def _get_fastapi_main(self) -> str:
        return f'''"""Main FastAPI application."""
from fastapi import FastAPI
from .routers import auth

app = FastAPI(title="{self.project_name}", version="0.1.0")
app.include_router(auth.router, prefix="/api/v1/auth", tags=["authentication"])

@app.get("/")
def read_root():
    return {{"message": "Welcome to {self.project_name} API"}}

@app.get("/health")
def health_check():
    return {{"status": "healthy"}}
'''

    def _get_fastapi_database(self) -> str:
        return '''"""Database configuration."""
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./app.db")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
'''

    def _get_fastapi_auth_router(self) -> str:
        return '''"""Authentication router."""
from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from ..database import get_db

router = APIRouter()

@router.post("/login")
def login(db: Session = Depends(get_db)):
    return {"message": "Login endpoint"}

@router.post("/register")
def register(db: Session = Depends(get_db)):
    return {"message": "Register endpoint"}
'''

    def _get_visualization_module(self) -> str:
        return '''"""Visualization module."""
import matplotlib.pyplot as plt
import pandas as pd
from typing import Optional

def create_histogram(data: pd.Series, title: str = "Histogram",
                    save_path: Optional[str] = None) -> None:
    """Create histogram from pandas Series."""
    plt.figure(figsize=(10, 6))
    plt.hist(data, bins=30, alpha=0.7)
    plt.title(title)
    plt.xlabel(data.name)
    plt.ylabel("Frequency")

    if save_path:
        plt.savefig(save_path)
    else:
        plt.show()
    plt.close()
'''

    def _get_cli_module(self) -> str:
        return '''"""CLI module."""
import click

@click.group()
def cli():
    """Main CLI entry point."""
    pass

@cli.command()
@click.option('--name', default='World', help='Name to greet.')
def hello(name):
    """Greet someone."""
    click.echo(f'Hello {name}!')

@cli.command()
def version():
    """Show version."""
    click.echo("Version 0.1.0")

if __name__ == '__main__':
    cli()
'''

    def _get_cli_main(self) -> str:
        return '''"""CLI main entry point."""
from .cli import cli

if __name__ == '__main__':
    cli()
'''

    def _get_django_apps_py(self) -> str:
        return '''"""Django app configuration."""
from django.apps import AppConfig

class CoreConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'core'
'''
